<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yulan.net.cn</id>
    <title>语阑gz</title>
    <updated>2021-08-29T14:29:24.344Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yulan.net.cn"/>
    <link rel="self" href="https://yulan.net.cn/atom.xml"/>
    <subtitle>独语斜阑</subtitle>
    <logo>https://yulan.net.cn/images/avatar.png</logo>
    <icon>https://yulan.net.cn/favicon.ico</icon>
    <rights>All rights reserved 2021, 语阑gz</rights>
    <entry>
        <title type="html"><![CDATA[881. 救生艇 2021-08-26]]></title>
        <id>https://yulan.net.cn/post/erlm2m_ugz5wq/</id>
        <link href="https://yulan.net.cn/post/erlm2m_ugz5wq/">
        </link>
        <updated>2021-08-26T07:14:49.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
public:
    int numRescueBoats(vector&lt;int&gt;&amp; people, int limit) {
        sort(people.begin(), people.end());
        int count = 0;
        vector&lt;bool&gt; used(people.size(), false);
        for (int i = (int) people.size() - 1; i &gt;= 0; --i) {
            if (used[i])
                continue;
            ++count;
            auto pt = upper_bound(people.begin(), people.begin() + i, limit - people[i]);
            if (pt == people.begin())
                continue;
            do {
                --pt;
                if (!used[pt - people.begin()]) {
                    used[pt - people.begin()] = true;
                    break;
                }
            } while (pt != people.begin());
        }
        return count;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[797. 所有可能的路径 2021-08-25]]></title>
        <id>https://yulan.net.cn/post/erlm2m_tmg8zs/</id>
        <link href="https://yulan.net.cn/post/erlm2m_tmg8zs/">
        </link>
        <updated>2021-08-25T05:24:15.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
private:
    vector&lt;vector&lt;int&gt; &gt; ans;
    vector&lt;int&gt; path;

    void DFS(int node, vector&lt;vector&lt;int&gt;&gt; &amp;G) {
        if (node == G.size() - 1) {
            path.push_back(node);
            ans.push_back(path);
            path.pop_back();
            return;
        }

        path.push_back(node);
        for (auto i : G[node]) {
            DFS(i, G);
        }
        path.pop_back();
    }

public:
    vector&lt;vector&lt;int&gt;&gt; allPathsSourceTarget(vector&lt;vector&lt;int&gt;&gt; &amp;graph) {
        DFS(0, graph);
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[787. K 站中转内最便宜的航班 2021-08-24]]></title>
        <id>https://yulan.net.cn/post/erlm2m_cdiz9f/</id>
        <link href="https://yulan.net.cn/post/erlm2m_cdiz9f/">
        </link>
        <updated>2021-08-24T07:57:26.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
private:
    const int NOT_CONNECTED = 10000000;
public:
    int findCheapestPrice(int n, vector&lt;vector&lt;int&gt;&gt; &amp;flights, int src, int dst, int k) {
        vector&lt;vector&lt;int&gt; &gt; G(n, vector&lt;int&gt;(n, NOT_CONNECTED));
        for (auto &amp;flight : flights) {
            G[flight[0]][flight[1]] = flight[2];
        }
        for (int i = 0; i &lt; n; ++i)
            G[i][i] = 0;
        vector&lt;vector&lt;int&gt; &gt; dp(k + 2, vector&lt;int&gt;(n, NOT_CONNECTED));
        dp[0][src] = 0;
        for (int i = 1; i &lt;= k + 1; ++i) {
            for (int j = 0; j &lt; n; ++j) {
                for (int l = 0; l &lt; n; ++l) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][l] + G[l][j]);
                }
            }
        }
        return dp[k + 1][dst] == NOT_CONNECTED ? -1 : dp[k + 1][dst];
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[789. 逃脱阻碍者 2021-08-22]]></title>
        <id>https://yulan.net.cn/post/erlm2m_iaa622/</id>
        <link href="https://yulan.net.cn/post/erlm2m_iaa622/">
        </link>
        <updated>2021-08-21T23:48:17.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
public:
    bool escapeGhosts(vector&lt;vector&lt;int&gt;&gt;&amp; ghosts, vector&lt;int&gt;&amp; target) {
        int steps = abs(target[0]) + abs(target[1]);
        for (auto ghost : ghosts) {
            if (abs(ghost[0] - target[0]) + abs(ghost[1] - target[1]) &lt;= steps)
                return false;
        }
        return true;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[443. 压缩字符串 2021-08-21]]></title>
        <id>https://yulan.net.cn/post/erlm2m_vaxcsq/</id>
        <link href="https://yulan.net.cn/post/erlm2m_vaxcsq/">
        </link>
        <updated>2021-08-21T05:03:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
private:
    inline int digital_length(int a) {
        int count = 0;
        while (a &gt; 0) {
            ++count;
            a /= 10;
        }
        return count;
    }

    inline int put_num(vector&lt;char&gt; &amp;chars, int start, int num) {
        int len = digital_length(num);
        for (int i = 1; i &lt;= len; ++i) {
            chars[start + len - i] = '0' + (num % 10);
            num /= 10;
        }
        return len;
    }

public:
    int compress(vector&lt;char&gt; &amp;chars) {
        char pre;
        int count;
        int ans = 0;
        pre = chars[0];
        count = 1;
        int i, j;
        for (i = 1, j = 0; i &lt; chars.size(); ++i) {
            if (chars[i] == pre)
                ++count;
            else {
                chars[j++] = pre;
                ans += 1;
                if (count &gt; 1) {
                    int len = put_num(chars, j, count);
                    j += len;
                    ans += len;
                }
                count = 1;
                pre = chars[i];
            }
        }
        chars[j++] = pre;
        ans += 1;
        if (count &gt; 1) {
            int len = put_num(chars, j, count);
            ans += len;
        }
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[541. 反转字符串 II 2021-08-20]]></title>
        <id>https://yulan.net.cn/post/erlm2m_gy90w7/</id>
        <link href="https://yulan.net.cn/post/erlm2m_gy90w7/">
        </link>
        <updated>2021-08-19T23:31:30.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
public:
    string reverseStr(string s, int k) {
        auto it = s.begin();
        while (it + 2 * k &lt; s.end()) {
            reverse(it, it + k);
            it += 2 * k;
        }
        if (s.end() - it &gt;= k)
            reverse(it, it + k);
        else
            reverse(it, s.end());
        return s;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[345. 反转字符串中的元音字母 2021-08-19]]></title>
        <id>https://yulan.net.cn/post/erlm2m_omq5ic/</id>
        <link href="https://yulan.net.cn/post/erlm2m_omq5ic/">
        </link>
        <updated>2021-08-19T05:31:22.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
private:
    set&lt;char&gt; vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
public:
    string reverseVowels(string s) {
        int p1 = 0, p2 = s.length() - 1;
        while (p1 &lt; p2) {
            while (p1 &lt; p2 &amp;&amp; vowels.count(s[p1]) == 0) {
                ++p1;
            }
            while (p1 &lt; p2 &amp;&amp; vowels.count(s[p2]) == 0) {
                --p2;
            }
            if (p1 &lt; p2)
                swap(s[p1], s[p2]);
            ++p1;
            --p2;
        }
        return s;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[552. 学生出勤记录 II 2021-08-18]]></title>
        <id>https://yulan.net.cn/post/erlm2m_whqg9c/</id>
        <link href="https://yulan.net.cn/post/erlm2m_whqg9c/">
        </link>
        <updated>2021-08-18T01:38:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="dp">DP</h2>
<pre><code class="language-cpp">class Solution {
private:
    static constexpr int CEIL = 1000000007;
public:
    int checkRecord(int n) {
        vector&lt;vector&lt;long long&gt; &gt; dp(n, vector&lt;long long&gt;(6, 0));
        // dp[i][0~2]表示在第i天，总A数为0，连续L数为0/1/2时的总组合数，
        // dp[i][3~5]表示在第i天，总A数为1，连续L数为0/1/2时的总组合数

        dp[0][0] = 1; // 第一天为P
        dp[0][1] = 1; // 第一天为L
        dp[0][3] = 1; // 第一天为A
        for (int i = 1; i &lt; n; ++i) {
            // 第i天为P
            for (int j = 0; j &lt; 3; ++j) {
                dp[i][0] = (dp[i][0] + dp[i - 1][j]) % CEIL;
            }
            for (int j = 3; j &lt; 6; ++j) {
                dp[i][3] = (dp[i][3] + dp[i - 1][j]) % CEIL;
            }

            // 第i天为A
            for (int j = 0; j &lt; 3; ++j) {
                dp[i][3] = (dp[i][3] + dp[i - 1][j]) % CEIL;
            }

            // 第i天为L
            dp[i][1] = (dp[i][1] + dp[i - 1][0]) % CEIL;
            dp[i][2] = (dp[i][2] + dp[i - 1][1]) % CEIL;

            dp[i][4] = (dp[i][4] + dp[i - 1][3]) % CEIL;
            dp[i][5] = (dp[i][5] + dp[i - 1][4]) % CEIL;
        }
        long long count = 0;
        for (int i = 0; i &lt; 6; ++i) {
            count = (count + dp[n - 1][i]) % CEIL;
        }
        return count;
    }
};
</code></pre>
<h2 id="优化空间复杂度">优化空间复杂度</h2>
<pre><code class="language-cpp">class Solution {
private:
    static constexpr int CEIL = 1000000007;
public:
    int checkRecord(int n) {
        vector&lt;long long&gt; dp1(6, 0), dp2(6, 0);

        dp1[0] = 1; // 第一天为P
        dp1[1] = 1; // 第一天为L
        dp1[3] = 1; // 第一天为A
        for (int i = 1; i &lt; n; ++i) {
            // 第i天为P
            for (int j = 0; j &lt; 3; ++j) {
                dp2[0] = (dp2[0] + dp1[j]) % CEIL;
            }
            for (int j = 3; j &lt; 6; ++j) {
                dp2[3] = (dp2[3] + dp1[j]) % CEIL;
            }

            // 第i天为A
            for (int j = 0; j &lt; 3; ++j) {
                dp2[3] = (dp2[3] + dp1[j]) % CEIL;
            }

            // 第i天为L
            dp2[1] = (dp2[1] + dp1[0]) % CEIL;
            dp2[2] = (dp2[2] + dp1[1]) % CEIL;

            dp2[4] = (dp2[4] + dp1[3]) % CEIL;
            dp2[5] = (dp2[5] + dp1[4]) % CEIL;

            dp1.swap(dp2);
            fill(dp2.begin(), dp2.end(), 0);
        }
        long long count = 0;
        for (int i = 0; i &lt; 6; ++i) {
            count = (count + dp1[i]) % CEIL;
        }
        return count;
    }
};
</code></pre>
<p>优化后时间复杂度为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<p>空间复杂度为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[551. 学生出勤记录 I 2021-08-17]]></title>
        <id>https://yulan.net.cn/post/erlm2m_hqc1dh/</id>
        <link href="https://yulan.net.cn/post/erlm2m_hqc1dh/">
        </link>
        <updated>2021-08-17T05:24:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
public:
    bool checkRecord(string s) {
        int countA = 0;
        int countL = 0;
        for (char c : s) {
            if (c == 'A') {
                ++countA;
                if (countA == 2)
                    return false;
            }
                
            if (c == 'L') {
                ++countL;
                if (countL == 3)
                    return false;
            }
            else
                countL = 0;
        }
        return true;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[526. 优美的排列 2021-08-16]]></title>
        <id>https://yulan.net.cn/post/erlm2m_gvrog8/</id>
        <link href="https://yulan.net.cn/post/erlm2m_gvrog8/">
        </link>
        <updated>2021-08-15T20:50:00.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">class Solution {
private:
    vector&lt;bool&gt; used;
    int n;

    int DFS(int ind) {
        if (ind == n + 1) return 1;
        int count = 0;
        for (int i = 1; i &lt;= n; ++i) {
            if (ind % i == 0 || i % ind == 0)
                if (!used[i]) {
                    used[i] = true;
                    count += DFS(ind + 1);
                    used[i] = false;
                }
        }
        return count;
    }

public:
    int countArrangement(int n_) {
        this-&gt;n = n_;
        used.resize(n + 1, false);
        return DFS(1);
    }
};
</code></pre>
]]></content>
    </entry>
</feed>